#!/bin/bash
# ===============================================
# üß© Dynamic Subdomain Sync ‚Äî Public Release v1.0.0
# ===============================================
# Author: Revi9x
# License: MIT
# -----------------------------------------------
# Description:
#   Automatically syncs DNS A-records from cPanel
#   with active Docker containers for game servers,
#   prioritizing UDP ports and common game port ranges.
#
# Features:
#   ‚Ä¢ Fetch DNS A-records from cPanel JSON API
#   ‚Ä¢ Detect Docker containers and map ports
#   ‚Ä¢ Prefers UDP for game traffic (Rust, CS2, etc.)
#   ‚Ä¢ Safe rollback and validation via Caddy
#   ‚Ä¢ Interactive first-time setup (auto-saves config)
#   ‚Ä¢ No external config files needed after first run
#
# Dependencies:
#   curl, jq, docker, bash ‚â• 5
#
# Logs:
#   /var/log/syncsd.log
#
# Config Cache:
#   /etc/revive/config.env
#
# ===============================================

set -e

CONFIG_FILE="/etc/revive/config.env"
LOGFILE="/var/log/syncsd.log"
CADDYFILE="/etc/caddy/Caddyfile"
TMPFILE="/tmp/Caddyfile.sync"
EMAIL_DEFAULT="admin@yourdomain.com"
COMMON_PORTS=(25565 27015 27016 28015 7777 21212 8080 80)

mkdir -p "$(dirname "$LOGFILE")" /etc/revive
touch "$LOGFILE"
[[ -f "$CADDYFILE" ]] || echo "# Initial Caddyfile" > "$CADDYFILE"
[[ -f "${CADDYFILE}.bak" ]] || cp "$CADDYFILE" "${CADDYFILE}.bak"

# === Logging ===
log() { echo "$*" | tee -a "$LOGFILE"; }

# === Load or Create Config ===
if [[ ! -f "$CONFIG_FILE" ]]; then
  echo "‚öôÔ∏è  Initial setup: please provide your environment info."
  read -rp "üëâ cPanel Username: " CPANEL_USER
  read -rp "üëâ cPanel API Token: " CPANEL_TOKEN
  read -rp "üëâ cPanel Hostname (e.g., us01.hosting.com): " CPANEL_HOST
  read -rp "üëâ Root Domain (e.g., example.com): " DOMAIN
  read -rp "üëâ Admin Email for TLS (default: ${EMAIL_DEFAULT}): " EMAIL
  EMAIL=${EMAIL:-$EMAIL_DEFAULT}

  cat <<EOF > "$CONFIG_FILE"
CPANEL_USER="${CPANEL_USER}"
CPANEL_TOKEN="${CPANEL_TOKEN}"
CPANEL_HOST="${CPANEL_HOST}"
DOMAIN="${DOMAIN}"
EMAIL="${EMAIL}"
EOF
  chmod 600 "$CONFIG_FILE"
  echo "‚úÖ Config saved to $CONFIG_FILE"
fi

# === Load Config ===
# shellcheck disable=SC1091
source "$CONFIG_FILE"

log ""
log "===== [ Dynamic Subdomain Sync ‚Äî v1.0.0 ] ====="
log "üîç Fetching DNS A records for ${DOMAIN}..."

# === Fetch DNS Records ===
JSON=$(curl -s -H "Authorization: cpanel ${CPANEL_USER}:${CPANEL_TOKEN}" \
  "https://${CPANEL_HOST}:2083/json-api/cpanel?cpanel_jsonapi_user=${CPANEL_USER}&cpanel_jsonapi_apiversion=2&cpanel_jsonapi_module=ZoneEdit&cpanel_jsonapi_func=fetchzone&domain=${DOMAIN}")

mapfile -t SUBDOMAINS < <(echo "$JSON" | jq -r '.cpanelresult.data[0].record[]? | select(.type=="A") | .name' \
  | sed 's/\.$//' | grep -E "\.${DOMAIN}$" | sed "s/\.${DOMAIN}$//" | sort -u)

if [[ ${#SUBDOMAINS[@]} -eq 0 ]]; then
  log "‚ùå No A-records found ‚Äî aborting."
  exit 1
fi
log "‚úÖ Retrieved ${#SUBDOMAINS[@]} A-records."

# === Filter malformed ===
VALID_SUBS=()
for sub in "${SUBDOMAINS[@]}"; do
  [[ -z "$sub" || "$sub" == "*" || ! "$sub" =~ ^[a-zA-Z0-9-]+$ ]] && {
    log "‚ö†Ô∏è Skipping malformed: '$sub'"
    continue
  }
  VALID_SUBS+=("$sub")
done

[[ ${#VALID_SUBS[@]} -eq 0 ]] && { log "‚ùå No valid subdomains remain."; exit 1; }

# === Docker Port Discovery ===
log "üîé Scanning Docker containers..."
declare -A DOCKER_TCP_PORTS
declare -A DOCKER_UDP_PORTS

while read -r CID NAME; do
  TCP_PORTS=$(docker port "$CID" | grep '/tcp' | awk '{print $3}' | awk -F: '{print $NF}' | sort -u | xargs)
  UDP_PORTS=$(docker port "$CID" | grep '/udp' | awk '{print $3}' | awk -F: '{print $NF}' | sort -u | xargs)
  DOCKER_TCP_PORTS["$NAME"]="$TCP_PORTS"
  DOCKER_UDP_PORTS["$NAME"]="$UDP_PORTS"
done < <(docker ps --format '{{.ID}} {{.Names}}')

log "‚úÖ Found ${#DOCKER_TCP_PORTS[@]} container(s)."
for name in "${!DOCKER_TCP_PORTS[@]}"; do
  [[ -z "${DOCKER_TCP_PORTS[$name]}" && -z "${DOCKER_UDP_PORTS[$name]}" ]] && continue
  log "   ‚Ä¢ $name ‚Üí TCP[${DOCKER_TCP_PORTS[$name]}] UDP[${DOCKER_UDP_PORTS[$name]}]"
done

# === Pick most likely port ===
pick_port() {
  local udp="$1"; local tcp="$2"; local port=""
  if [[ -n "$udp" ]]; then
    for cp in "${COMMON_PORTS[@]}"; do
      [[ "$udp" =~ $cp ]] && { port="$cp"; break; }
    done
    [[ -z "$port" ]] && port=$(echo "$udp" | awk '{print $1}')
  elif [[ -n "$tcp" ]]; then
    for cp in "${COMMON_PORTS[@]}"; do
      [[ "$tcp" =~ $cp ]] && { port="$cp"; break; }
    done
    [[ -z "$port" ]] && port=$(echo "$tcp" | awk '{print $1}')
  fi
  echo "$port"
}

# === Build new config ===
log "üß± Building new Caddyfile: $TMPFILE"
echo "# Auto-generated by RG Dynamic Subdomain Sync" > "$TMPFILE"
echo "" >> "$TMPFILE"

for sub in "${VALID_SUBS[@]}"; do
  FULL="${sub}.${DOMAIN}"
  BACKEND="panel:80"
  for cname in "${!DOCKER_TCP_PORTS[@]}"; do
    if [[ "$FULL" =~ $cname ]] || [[ "$sub" == "$cname" ]]; then
      UDP="${DOCKER_UDP_PORTS[$cname]}"
      TCP="${DOCKER_TCP_PORTS[$cname]}"
      PORT=$(pick_port "$UDP" "$TCP")
      [[ -n "$PORT" ]] && BACKEND="${cname}:${PORT}"
      break
    fi
  done
  cat <<EOF >> "$TMPFILE"
${FULL} {
    reverse_proxy ${BACKEND}
    tls ${EMAIL}
}

EOF
  log "‚Ä¢ ${FULL} ‚Üí ${BACKEND}"
done

[[ ! -s "$TMPFILE" ]] && { log "‚ùå Empty config ‚Äî aborting."; exit 1; }
log "‚úÖ Caddyfile structure verified."

# === Remove stale ===
log "üßπ Cleaning obsolete entries..."
EXISTING=$(grep -E '^[a-zA-Z0-9.-]+\s*\{' "$CADDYFILE" | awk '{print $1}' | sed 's/{//' | sort -u)
for entry in $EXISTING; do
  SUB=$(echo "$entry" | sed "s/\.${DOMAIN}//")
  [[ ! " ${VALID_SUBS[*]} " =~ " ${SUB} " ]] && {
    log "üóëÔ∏è Removing ${entry}"
    awk -v site="$entry" '
      BEGIN {keep=1}
      $0 ~ site" " {keep=0}
      /^\}/ && keep==0 {keep=1; next}
      keep {print}
    ' "$CADDYFILE" > "${CADDYFILE}.tmp" && mv "${CADDYFILE}.tmp" "$CADDYFILE"
  }
done

# === Validate & Reload ===
log "üîç Validating configuration..."
if docker exec -i revive-caddy caddy validate --adapter caddyfile --config - < "$TMPFILE" >/dev/null 2>&1; then
  log "‚úÖ Configuration valid."
  cp "$CADDYFILE" "${CADDYFILE}.bak"
  mv "$TMPFILE" "$CADDYFILE"
  docker exec revive-caddy caddy reload --config "$CADDYFILE" >/dev/null 2>&1 && log "üöÄ Reload successful."
else
  log "‚ùå Validation failed ‚Äî rollback initiated."
  cp "${CADDYFILE}.bak" "$CADDYFILE"
  docker exec revive-caddy caddy reload --config "$CADDYFILE" >/dev/null 2>&1
  cp "$TMPFILE" /tmp/Caddyfile.failed
fi

log "‚úÖ Sync Complete ‚Äî DNS and containers aligned."
log "========= üõ†Ô∏è Maintained by Revi9x üõ†Ô∏è ========="
